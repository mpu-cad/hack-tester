import subprocess
import time
import json
import csv
from pathlib import Path
import os

def run_locust_test(
    host: str = "http://localhost:8000",
    users: int = 10,
    spawn_rate: int = 10,
    duration: str = "1m",
    locustfile: str = "tester.py",
    stats_output_dir: str = "load_test_results"
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Locust-—Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = Path(stats_output_dir)
    output_dir.mkdir(exist_ok=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    stats_csv = output_dir / f"locust_stats_{timestamp}.csv"
    stats_json = output_dir / f"locust_stats_{timestamp}.json"

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Locust
    cmd = [
        "locust",
        "-f", locustfile,
        "--host", host,
        "--headless",
        "-u", str(users),
        "-r", str(spawn_rate),
        "-t", duration,
        "--csv", str(output_dir / "locust_stats"),  # Locust —Å–∞–º –¥–æ–±–∞–≤–∏—Ç timestamp
        "--json"  # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ JSON (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    ]

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç: {cmd}")
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    if process.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Locust:\n{stderr.decode()}")
        return

    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

    # –ß—Ç–µ–Ω–∏–µ CSV-—Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª Locust
    stats_file = output_dir / "locust_stats_stats.csv"
    try:
        if stats_file.exists():
            with open(stats_file, "r") as f:
                csv_data = list(csv.DictReader(f))
            with open(stats_json, "w") as f:
                json.dump(csv_data, f, indent=2)
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n- {stats_csv}\n- {stats_json}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Locust –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.")
            return
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return

    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    if csv_data:
        last_row = csv_data[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å (–∏—Ç–æ–≥–∏)
        print("\nüìå –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–ó–∞–ø—Ä–æ—Å–æ–≤: {last_row['Request Count']}")
        print(f"–û—à–∏–±–æ–∫: {last_row['Failure Count']} ({last_row['Failures/s']} –æ—à–∏–±–æ–∫/—Å–µ–∫)")
        print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {last_row['Average Response Time']} –º—Å")
        print(f"RPS: {last_row['Requests/s']}")

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å Locust.")
    parser.add_argument("--host", default="http://localhost:8000", help="URL —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--users", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    parser.add_argument("--spawn-rate", type=int, default=10, help="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Å–µ–∫—É–Ω–¥—É)")
    parser.add_argument("--duration", default="1m", help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1m, 5m)")
    parser.add_argument("--locustfile", default="tester.py", help="–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è Locust")
    parser.add_argument("--output-dir", default="load_test_results", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    args = parser.parse_args()

    run_locust_test(
        host=args.host,
        users=args.users,
        spawn_rate=args.spawn_rate,
        duration=args.duration,
        locustfile=args.locustfile,
        stats_output_dir=args.output_dir
    )
